#! /usr/bin/env perl
#
use v5.12;
use strict;
use warnings;
use utf8;
use open qw(:std :utf8);

use Encode qw(decode_utf8);
@ARGV = map { decode_utf8($_) } @ARGV;

=pod

=encoding utf8

=head1 NAME

kroki-fg-navaid - navigation helper for FlightGear

=head1 SYNOPSIS

  kroki-fg-navaid [OPTIONS] -- LATITUDE,LONGITUDE

=head2 LOCATION

I<LATITUDE> and I<LONGITUDE> of a location may be given in a number of
formats, including

  N35°23'42.36"

  -136o 51' 14.04''

  s28.567894

  w46o36"

  E 235 o 4.5678 '

I.e. northern hemisphere is specified by prefix B<N>, B<n>, B<+>, or
no prefix; southern hemisphere is specified by prefix B<S>, B<s>, or
B<->; eastern hemisphere by B<E>, B<e>, B<+> or no prefix; western
hemisphere by B<W>, B<w>, or B<->.  Coordinates may be given either as
a decimal degrees or as a triplet of degrees (denoted by B<°> or
B<o>), minutes (denoted by B<'>), seconds (denoted by B<"> or B<''>).
Each part is optional and the last one may be fractional.  Whitespaces
are ignored.  Coordinates are normalized, for instance B<N91,E096>
becomes B<N89,W084>.

=head2 OPTIONS

=over

=item C<-W, --wmm=YEAR>

World Magnetic Model coefficients version.  Available are I<2005> and
I<2010>.  Default is I<2005> for compatibility with FlightGear 2.12.

=item C<-h, --help>

Print this message and exit.

=back

=head1 BUGS

Report bugs at <https://github.com/kroki/fg-navaid/issues> or directly
to <tomash.brechko@gmail.com>.

=head1 COPYRIGHT & LICENSE

Copyright (C) 2013 Tomash Brechko.  All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

use Getopt::Long qw(:config gnu_getopt);
use Pod::Usage;

my %option = (
    wmm => 2005,
);
if (! GetOptions(\%option, qw(wmm|W=i help|h))
    || @ARGV != 1 || $ARGV[0] !~ /.,./) {
    pod2usage(1);
}
if (exists $option{help}) {
    pod2usage(0);
    exit;
}


use Geo::Inverse;

my $igeo = Geo::Inverse->new();
my $magdecl = MagneticDeclination->new($igeo->ellipsoid, $option{wmm});

my ($location) = @ARGV;

use POSIX qw(fmod);

my ($lat, $lon) = map { str2deg($_) } split /,/, $location, 2;
if (defined $lat and defined $lon) {
    $lat = fmod($lat, 180);
    if ($lat > 90) {
        $lat = -$lat + 180;
        $lon += 180;
    } elsif ($lat < -90) {
        $lat = -$lat - 180;
        $lon += 180;
    }
    $lon = fmod($lon, 360);
    if ($lon > 180) {
        $lon = $lon - 360;
    } elsif ($lon < -180) {
        $lon = $lon + 360;
    }

    my $md = $magdecl->compute($lat, $lon);
    say "Coordinates: ", coords2str($lat, $lon);
    say "Magnetic declination: ", magdecl2str($md);
}


exit;


sub str2deg {
    my ($str) = @_;

    use Regexp::Grammars;

    my $deg = qr{
        ^ <val> $

        <rule: val>      <sign>? <deg>
                         <MATCH=(?{ ($MATCH{sign}//1) * ($MATCH{deg}//0) })>
        <rule: sign>     <pos> <MATCH=1> | <neg> <MATCH=-1>
        <rule: pos>      \+ | N | E
        <rule: neg>      \- | S | W
        <rule: deg>      <MATCH=float> [°o]?
                       | (?: <int> [°o] )? <min>
                         <MATCH=(?{ ($MATCH{int}//0) + ($MATCH{min}//0) / 60 })>
        <rule: min>      <MATCH=float> \'?
                       | (?: <int> \' )? <sec>
                         <MATCH=(?{ ($MATCH{int}//0) + ($MATCH{sec}//0) / 60 })>
        <rule: sec>      <MATCH=float> (?: \" | \'\' )?
                       | <MATCH=int> (?: \" | \'\' )
                       | <MATCH=0>
        <token: float>   \d+(?:\.\d*)? | \.\d+
        <token: int>     \d+
    }ix;

    if ($str =~ $deg) {
        return $/{val};
    } else {
        return undef;
    }
}


sub deg2dms2f {
    my ($pos, $neg, $deg) = @_;

    my $sign = $pos;
    if ($deg < 0) {
        $sign = $neg;
        $deg = -$deg;
    }
    my $d = int($deg * 360000 + 0.5);
    my $s = ($d % 6000) / 100;
    $d = int($d / 6000);
    my $m = $d % 60;
    $d = int($d / 60);

    return ($sign, $d, $m, $s);
}


sub deg2dm {
    my ($pos, $neg, $deg) = @_;

    my $sign = $pos;
    if ($deg < 0) {
        $sign = $neg;
        $deg = -$deg;
    }
    my $d = int($deg * 60 + 0.5);
    my $m = $d % 60;
    $d = int($d / 60);

    return ($sign, $d, $m);
}


sub coords2str {
    my ($lat, $lon) = @_;

    sprintf(q{%s%02d°%02d'%05.2f", %s%03d°%02d'%05.2f" (%.6f, %.6f)},
            deg2dms2f('N', 'S', $lat), deg2dms2f('E', 'W', $lon), $lat, $lon)
}


sub magdecl2str {
    my ($md) = @_;

    sprintf(q{%s%d°%02d' (%.2f)}, deg2dm('E', 'W', $md), $md)
}


######################################################################
#
# MagneticDeclination computes magnetic declination of a location.
#
# Computations are copied from simgear/magvar/coremag.cxx.
#
package MagneticDeclination;

use DateTime;
use Math::Trig qw(:pi);

use constant NMAX => 12;

sub new {
    my $class = shift;
    my ($ellipsoid, $wmm) = @_;

    my $self = {
        r_0 => 6371.2,
        a => $ellipsoid->a / 1000,
        b => $ellipsoid->b / 1000,
    };

    foreach my $n (1..NMAX) {
        foreach my $m (0..NMAX) {
            $self->{gnm}[$n][$m] = 0;
            $self->{hnm}[$n][$m] = 0;
        }
    }
    my $yearfrac = (DateTime->now->mjd - DateTime->new(year => $wmm)->mjd)
                   / 365.25;
    while (<DATA>) {
        if (/\sWMM-$wmm\s/ .. /^9{10}/) {
            my @c = split;
            next unless @c == 6;
            $self->{gnm}[$c[0]][$c[1]] = $c[2] + $c[4] * $yearfrac;
            $self->{hnm}[$c[0]][$c[1]] = $c[3] + $c[5] * $yearfrac;
        }
    }

    foreach my $n (2..NMAX) {
        $self->{root}[$n] = sqrt((2*$n - 1) / (2*$n));
    }
    foreach my $m (0..NMAX) {
        foreach my $n (($m < 2 ? 2 : $m + 1)..NMAX) {
            $self->{roots}[$m][$n] = [
                sqrt(($n - 1)**2 - $m**2),
                1 / sqrt($n**2 - $m**2)
            ];
        }
    }

    return bless($self, $class);
}

sub compute {
    my $self = shift;
    my ($lat, $lon) = @_;

    $lat = Math::Trig::deg2rad($lat);
    $lon = Math::Trig::deg2rad($lon);

    my ($a, $b, $root, $roots, $gnm, $hnm, $r_0) =
        @$self{qw(a b root roots gnm hnm r_0)};

    my $sinlat = sin($lat);
    my $coslat = cos($lat);

    my $theta = atan2($coslat * $a**2, $sinlat * $b**2);

    my $r = sqrt(($a**4 - ($a**4 - $b**4) * $sinlat**2)
                 / ($a**2 - ($a**2 - $b**2) * $sinlat**2));

    my $c = cos($theta);
    my $s = sin($theta);
    my $inv_s = 1 / ($s or 1e-8);

    my (@P, @DP);
    foreach my $n (0..NMAX) {
        foreach my $m (0..NMAX) {
            $P[$n][$m] = 0;
            $DP[$n][$m] = 0;
        }
    }
    $P[0][0] = 1;
    $P[1][0] = $c;
    $P[1][1] = $s;
    $DP[0][0] = 0;
    $DP[1][0] = -$s;
    $DP[1][1] = $c;
    foreach my $n (2..NMAX) {
        $P[$n][$n] = $P[$n-1][$n-1] * $s * $root->[$n];
        $DP[$n][$n] =
          ($DP[$n-1][$n-1] * $s + $P[$n-1][$n-1] * $c) * $root->[$n];
    }

    foreach my $m (0..NMAX) {
        foreach my $n (($m < 2 ? 2 : $m + 1)..NMAX) {
            $P[$n][$m] = ($P[$n-1][$m] * $c * (2*$n - 1)
                          - $P[$n-2][$m] * $roots->[$m][$n][0])
                         * $roots->[$m][$n][1];
            $DP[$n][$m] = (($DP[$n-1][$m] * $c - $P[$n-1][$m] * $s) * (2*$n - 1)
                           - $DP[$n-2][$m] * $roots->[$m][$n][0])
                          * $roots->[$m][$n][1];
        }
    }

    my (@sm, @cm);
    foreach my $m (0..NMAX) {
        $sm[$m] = sin($m * $lon);
        $cm[$m] = cos($m * $lon);
    }

    my ($B_r, $B_theta, $B_phi) = (0, 0, 0);
    my $fn_0 = $r_0 / $r;
    my $fn = $fn_0**2;

    foreach my $n (1..NMAX) {
        my ($c1_n, $c2_n, $c3_n) = (0, 0, 0);
        foreach my $m (0..NMAX) {
            my $t = $gnm->[$n][$m] * $cm[$m] + $hnm->[$n][$m] * $sm[$m];
            $c1_n += $t * $P[$n][$m];
            $c2_n += $t * $DP[$n][$m];
            $c3_n += $m * ($gnm->[$n][$m] * $sm[$m] - $hnm->[$n][$m] * $cm[$m])
                     * $P[$n][$m];
        }
        $fn *= $fn_0;
        $B_r += ($n + 1) * $c1_n * $fn;
        $B_theta -= $c2_n * $fn;
        $B_phi += $c3_n * $fn * $inv_s;
    }

    my $psi = $theta - (pip2 - $lat);
    my $X = -$B_theta * cos($psi) - $B_r * sin($psi);
    my $Y = $B_phi;

    return ($X != 0 || $Y != 0 ? Math::Trig::rad2deg(atan2($Y, $X)) : 0);
}

1;


__DATA__

# WMM2005COF:
    2005.0            WMM-2005         12/8/2004
  1  0  -29556.8       0.0        8.0        0.0
  1  1   -1671.7    5079.8       10.6      -20.9
  2  0   -2340.6       0.0      -15.1        0.0
  2  1    3046.9   -2594.7       -7.8      -23.2
  2  2    1657.0    -516.7       -0.8      -14.6
  3  0    1335.4       0.0        0.4        0.0
  3  1   -2305.1    -199.9       -2.6        5.0
  3  2    1246.7     269.3       -1.2       -7.0
  3  3     674.0    -524.2       -6.5       -0.6
  4  0     919.8       0.0       -2.5        0.0
  4  1     798.1     281.5        2.8        2.2
  4  2     211.3    -226.0       -7.0        1.6
  4  3    -379.4     145.8        6.2        5.8
  4  4     100.0    -304.7       -3.8        0.1
  5  0    -227.4       0.0       -2.8        0.0
  5  1     354.6      42.4        0.7        0.0
  5  2     208.7     179.8       -3.2        1.7
  5  3    -136.5    -123.0       -1.1        2.1
  5  4    -168.3     -19.5        0.1        4.8
  5  5     -14.1     103.6       -0.8       -1.1
  6  0      73.2       0.0       -0.7        0.0
  6  1      69.7     -20.3        0.4       -0.6
  6  2      76.7      54.7       -0.3       -1.9
  6  3    -151.2      63.6        2.3       -0.4
  6  4     -14.9     -63.4       -2.1       -0.5
  6  5      14.6      -0.1       -0.6       -0.3
  6  6     -86.3      50.4        1.4        0.7
  7  0      80.1       0.0        0.2        0.0
  7  1     -74.5     -61.5       -0.1        0.6
  7  2      -1.4     -22.4       -0.3        0.4
  7  3      38.5       7.2        1.1        0.2
  7  4      12.4      25.4        0.6        0.3
  7  5       9.5      11.0        0.5       -0.8
  7  6       5.7     -26.4       -0.4       -0.2
  7  7       1.8      -5.1        0.6        0.1
  8  0      24.9       0.0        0.1        0.0
  8  1       7.7      11.2        0.3       -0.2
  8  2     -11.6     -21.0       -0.4        0.1
  8  3      -6.9       9.6        0.3        0.3
  8  4     -18.2     -19.8       -0.3        0.4
  8  5      10.0      16.1        0.2        0.1
  8  6       9.2       7.7        0.4       -0.2
  8  7     -11.6     -12.9       -0.7        0.4
  8  8      -5.2      -0.2        0.4        0.4
  9  0       5.6       0.0        0.0        0.0
  9  1       9.9     -20.1        0.0        0.0
  9  2       3.5      12.9        0.0        0.0
  9  3      -7.0      12.6        0.0        0.0
  9  4       5.1      -6.7        0.0        0.0
  9  5     -10.8      -8.1        0.0        0.0
  9  6      -1.3       8.0        0.0        0.0
  9  7       8.8       2.9        0.0        0.0
  9  8      -6.7      -7.9        0.0        0.0
  9  9      -9.1       6.0        0.0        0.0
 10  0      -2.3       0.0        0.0        0.0
 10  1      -6.3       2.4        0.0        0.0
 10  2       1.6       0.2        0.0        0.0
 10  3      -2.6       4.4        0.0        0.0
 10  4       0.0       4.8        0.0        0.0
 10  5       3.1      -6.5        0.0        0.0
 10  6       0.4      -1.1        0.0        0.0
 10  7       2.1      -3.4        0.0        0.0
 10  8       3.9      -0.8        0.0        0.0
 10  9      -0.1      -2.3        0.0        0.0
 10 10      -2.3      -7.9        0.0        0.0
 11  0       2.8       0.0        0.0        0.0
 11  1      -1.6       0.3        0.0        0.0
 11  2      -1.7       1.2        0.0        0.0
 11  3       1.7      -0.8        0.0        0.0
 11  4      -0.1      -2.5        0.0        0.0
 11  5       0.1       0.9        0.0        0.0
 11  6      -0.7      -0.6        0.0        0.0
 11  7       0.7      -2.7        0.0        0.0
 11  8       1.8      -0.9        0.0        0.0
 11  9       0.0      -1.3        0.0        0.0
 11 10       1.1      -2.0        0.0        0.0
 11 11       4.1      -1.2        0.0        0.0
 12  0      -2.4       0.0        0.0        0.0
 12  1      -0.4      -0.4        0.0        0.0
 12  2       0.2       0.3        0.0        0.0
 12  3       0.8       2.4        0.0        0.0
 12  4      -0.3      -2.6        0.0        0.0
 12  5       1.1       0.6        0.0        0.0
 12  6      -0.5       0.3        0.0        0.0
 12  7       0.4       0.0        0.0        0.0
 12  8      -0.3       0.0        0.0        0.0
 12  9      -0.3       0.3        0.0        0.0
 12 10      -0.1      -0.9        0.0        0.0
 12 11      -0.3      -0.4        0.0        0.0
 12 12      -0.1       0.8        0.0        0.0
999999999999999999999999999999999999999999999999
999999999999999999999999999999999999999999999999

# WMM2010COF:
    2010.0            WMM-2010        11/20/2009
  1  0  -29496.6       0.0       11.6        0.0
  1  1   -1586.3    4944.4       16.5      -25.9
  2  0   -2396.6       0.0      -12.1        0.0
  2  1    3026.1   -2707.7       -4.4      -22.5
  2  2    1668.6    -576.1        1.9      -11.8
  3  0    1340.1       0.0        0.4        0.0
  3  1   -2326.2    -160.2       -4.1        7.3
  3  2    1231.9     251.9       -2.9       -3.9
  3  3     634.0    -536.6       -7.7       -2.6
  4  0     912.6       0.0       -1.8        0.0
  4  1     808.9     286.4        2.3        1.1
  4  2     166.7    -211.2       -8.7        2.7
  4  3    -357.1     164.3        4.6        3.9
  4  4      89.4    -309.1       -2.1       -0.8
  5  0    -230.9       0.0       -1.0        0.0
  5  1     357.2      44.6        0.6        0.4
  5  2     200.3     188.9       -1.8        1.8
  5  3    -141.1    -118.2       -1.0        1.2
  5  4    -163.0       0.0        0.9        4.0
  5  5      -7.8     100.9        1.0       -0.6
  6  0      72.8       0.0       -0.2        0.0
  6  1      68.6     -20.8       -0.2       -0.2
  6  2      76.0      44.1       -0.1       -2.1
  6  3    -141.4      61.5        2.0       -0.4
  6  4     -22.8     -66.3       -1.7       -0.6
  6  5      13.2       3.1       -0.3        0.5
  6  6     -77.9      55.0        1.7        0.9
  7  0      80.5       0.0        0.1        0.0
  7  1     -75.1     -57.9       -0.1        0.7
  7  2      -4.7     -21.1       -0.6        0.3
  7  3      45.3       6.5        1.3       -0.1
  7  4      13.9      24.9        0.4       -0.1
  7  5      10.4       7.0        0.3       -0.8
  7  6       1.7     -27.7       -0.7       -0.3
  7  7       4.9      -3.3        0.6        0.3
  8  0      24.4       0.0       -0.1        0.0
  8  1       8.1      11.0        0.1       -0.1
  8  2     -14.5     -20.0       -0.6        0.2
  8  3      -5.6      11.9        0.2        0.4
  8  4     -19.3     -17.4       -0.2        0.4
  8  5      11.5      16.7        0.3        0.1
  8  6      10.9       7.0        0.3       -0.1
  8  7     -14.1     -10.8       -0.6        0.4
  8  8      -3.7       1.7        0.2        0.3
  9  0       5.4       0.0        0.0        0.0
  9  1       9.4     -20.5       -0.1        0.0
  9  2       3.4      11.5        0.0       -0.2
  9  3      -5.2      12.8        0.3        0.0
  9  4       3.1      -7.2       -0.4       -0.1
  9  5     -12.4      -7.4       -0.3        0.1
  9  6      -0.7       8.0        0.1        0.0
  9  7       8.4       2.1       -0.1       -0.2
  9  8      -8.5      -6.1       -0.4        0.3
  9  9     -10.1       7.0       -0.2        0.2
 10  0      -2.0       0.0        0.0        0.0
 10  1      -6.3       2.8        0.0        0.1
 10  2       0.9      -0.1       -0.1       -0.1
 10  3      -1.1       4.7        0.2        0.0
 10  4      -0.2       4.4        0.0       -0.1
 10  5       2.5      -7.2       -0.1       -0.1
 10  6      -0.3      -1.0       -0.2        0.0
 10  7       2.2      -3.9        0.0       -0.1
 10  8       3.1      -2.0       -0.1       -0.2
 10  9      -1.0      -2.0       -0.2        0.0
 10 10      -2.8      -8.3       -0.2       -0.1
 11  0       3.0       0.0        0.0        0.0
 11  1      -1.5       0.2        0.0        0.0
 11  2      -2.1       1.7        0.0        0.1
 11  3       1.7      -0.6        0.1        0.0
 11  4      -0.5      -1.8        0.0        0.1
 11  5       0.5       0.9        0.0        0.0
 11  6      -0.8      -0.4        0.0        0.1
 11  7       0.4      -2.5        0.0        0.0
 11  8       1.8      -1.3        0.0       -0.1
 11  9       0.1      -2.1        0.0       -0.1
 11 10       0.7      -1.9       -0.1        0.0
 11 11       3.8      -1.8        0.0       -0.1
 12  0      -2.2       0.0        0.0        0.0
 12  1      -0.2      -0.9        0.0        0.0
 12  2       0.3       0.3        0.1        0.0
 12  3       1.0       2.1        0.1        0.0
 12  4      -0.6      -2.5       -0.1        0.0
 12  5       0.9       0.5        0.0        0.0
 12  6      -0.1       0.6        0.0        0.1
 12  7       0.5       0.0        0.0        0.0
 12  8      -0.4       0.1        0.0        0.0
 12  9      -0.4       0.3        0.0        0.0
 12 10       0.2      -0.9        0.0        0.0
 12 11      -0.8      -0.2       -0.1        0.0
 12 12       0.0       0.9        0.1        0.0
999999999999999999999999999999999999999999999999
999999999999999999999999999999999999999999999999
